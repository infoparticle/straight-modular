#+TITLE: Conf UI
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
Last Saved: "January 12 Tuesday, 2021"

Common UI configs

* Enabled Config

 :PROPERTIES:
 :header-args: :tangle yes
 :END:

** default face and theme                        :theme:
;:family "Fira Code medium"
(set-face-attribute 'default nil
                    :family "Consolas"
                    :height  115
                    :weight 'normal
                    :width 'normal)
(progn
    (set-face-attribute 'mode-line           nil :background "gray90" :box nil)
    (set-face-attribute 'mode-line-inactive  nil :background "gray95" :box nil))

#+BEGIN_SRC emacs-lisp
(set-face-font 'default "Roboto Mono Light 11")
;(load-file (expand-file-name "config/themes/my-default-theme.el" user-emacs-directory))

(use-package autothemer :ensure t)
(setq custom-theme-directory (expand-file-name "config/themes/" user-emacs-directory))
;(load-theme 'creamsody t)

(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :config)
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-nord t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;;(doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  ;;(doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(toggle-frame-fullscreen) ;;occupy full realestate!
#+END_SRC

** treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 t      ;disable icons
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-user-header-line-format       nil
          treemacs-width                         35)
    (treemacs-modify-theme "Default"
      :icon-directory "~/.emacs.d/icons"
      :config
      (progn
        (treemacs-create-icon :icon "+" :extensions (dir-closed))
        (treemacs-create-icon :icon "-" :extensions (dir-open))))

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after treemacs evil
)


(use-package treemacs-projectile
  :after treemacs projectile
  )
#+end_src

(use-package treemacs-icons-dired
  :after treemacs dired

  :config (treemacs-icons-dired-mode))


;; have to remove out to avoid errors not sure why.. -gopi (2020-06-27 Sat)
(use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
  :after treemacs persp-mode ;;or perspective vs. persp-mode

  :config (treemacs-set-scope-type 'Perspectives))

;; don't need magit as of now it slows down
(use-package treemacs-magit
  :after treemacs magit
  )


** neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :config
  (progn
    (setq neo-theme 'nerd
          neo-window-fixed-size nil)
    (with-system windows-nt
      (defun neotree-open-file-in-system-application ()
        (interactive)
        (shell-command (concat "start " (neo-buffer--get-filename-current-line)))))))
#+END_SRC
* Disabled Config
 :PROPERTIES:
 :header-args: :tangle no
 :END:

** load windows/linux specific ui configs        :ui:

#+BEGIN_SRC emacs-lisp
(with-system windows-nt
  (load-user-file "conf-ui-windows.el"))

(with-system gnu/linux
  (load-user-file "conf-ui-linux.el"))
#+END_SRC


** windows margin set-window-margins + window-configuration-change-hook
#+BEGIN_SRC emacs-lisp

;; Adjust margins of all windows.
(defun center-windows () ""
  (walk-windows (lambda (window) (set-window-margins window 2 0)) nil 1))

;; Listen to window changes.
(add-hook 'window-configuration-change-hook 'center-windows)
(global-visual-line-mode)

#+END_SRC

** visual-fill-column
This messes up the window margin configs, so simply avoiding it

#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column
  :after org
  :config
  (add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
  ;(add-hook 'text-mode-hook 'visual-line-mode)
  ;(global-visual-line-mode)
  )
#+END_SRC

** windows margin with left/right margin + window-configuration-change-hook
#+BEGIN_SRC emacs-lisp
(defun my--margin-setup ()
  (walk-windows
   (lambda (window)
     (with-current-buffer (window-buffer window)
       (setq left-margin-width 10)
       (setq right-margin-width 10)
       (set-window-buffer window (current-buffer))
       )
     )
   )
  )
(add-hook 'window-configuration-change-hook #'my--margin-setup)
(add-hook 'minibuffer-setup-hook #'my--margin-setup)
#+END_SRC

** window margin add-hook
#+BEGIN_SRC emacs-lisp
(defun major-briggs ()
  (when (eq major-mode 'text-mode)
    (set-window-margins
     (car (get-buffer-window-list (current-buffer) nil t)) 2 2
     )
    )
  )
(add-hook 'org-mode-hook (lambda ()
                           (major-briggs)
                           ;; insert additional stuff if so desired
                           ))
#+END_SRC
** dimmer | Didn't like it, like the windows bright :)

#+begin_src emacs-lisp
(use-package dimmer
:config
(dimmer-configure-which-key)
(dimmer-configure-helm)
(dimmer-mode t)
)
#+end_src
** custom font config
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(dired-subtree-depth-1-face ((t (:background "old lace"))))
 '(dired-subtree-depth-2-face ((t (:background "gray95"))))
 '(dired-subtree-depth-3-face ((t (:background "old lace"))))
 '(dired-subtree-depth-4-face ((t (:background "gray95"))))
 '(dired-subtree-depth-5-face ((t (:background "old lace"))))
 '(dired-subtree-depth-6-face ((t (:background "gray95"))))
 '(dired-subtree-depth-7-face ((t (:background "old lace"))))
 '(dired-subtree-depth-8-face ((t (:background "gray95"))))
 '(line-number ((t (:inherit default :foreground "gray80"))))
 '(org-block ((t (:extend t :background "gray95" :height 100 :family "Fira Code"))))
 '(org-block-begin-line ((t (:foreground "slateblue" :underline nil))))
 '(org-block-end-line ((t (:foreground "slateblue" :overline nil))))
 '(org-document-info-keyword ((t (:foreground "slateblue"))))
 '(org-document-title ((t (:foreground "DarkBlue" :overline nil :underline nil :weight bold :height 2.8 :family "Century"))))
 '(org-drawer ((t (:foreground "grey50"))))
 '(org-ellipsis ((t (:foreground "gray60" :background "white" :box nil :underline nil :overline nil :weight normal :height 80))))
 '(org-level-1 ((t (:height 1.3 :weight bold :overline "#A7A7A7" :foreground "#3C3C3C" :background "#F0F0F0"))))
 '(org-level-2 ((t (:height 1.0 :weight bold :overline "#123555" :foreground "#123555" :background "#E5F4FB"))))
 '(org-level-3 ((t (:height 1.0 :weight bold :foreground "#005522" :background "#EFFFEF"))))
 '(org-level-4 ((t (:height 1.0 :weight bold :slant normal :foreground "#EA6300"))))
 '(org-level-5 ((t (:height 1.0 :weight bold :slant normal :foreground "#E3258D"))))
 '(org-level-6 ((t (:height 1.0 :weight bold :slant italic :foreground "#0077CC"))))
 '(org-level-7 ((t (:height 1.0 :weight bold :slant italic :foreground "#2EAE2C"))))
 '(org-level-8 ((t (:height 1.0 :weight bold :slant italic :foreground "#FD8008"))))
 '(org-meta-line ((t (:foreground "slateblue"))))
 '(org-table ((t (:foreground "royalblue4")))))


#+END_SRC
