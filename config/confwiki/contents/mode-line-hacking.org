#+TITLE: Mode-Line Hacking
#+Last Saved: <2019-August-29 19:50:17>

** My hackish 

*** slate blue working handsom
#+BEGIN_SRC emacs-lisp
(defun init-mode-line-for-gui()
  (progn
    (setq-default mode-line-format
                  (
                   quote(
                         " "
                         (:eval
                          (when (eql buffer-read-only t)
                            (propertize " READ ONLY " 'face
                                        '(; :background "color-88"
                                          :foreground "white" :weight bold))))

                         (:eval
                          (propertize " %b " 'face
                                      (if (buffer-modified-p)
                                          '(;:background "white"
                                            :foreground "white" :weight bold :slant italic :underline t)
                                        '(;:background "white"
                                          :foreground "white" :weight bold :underline nil))))
                         "        "
                         mode-line-misc-info)))

    (set-face-attribute 'mode-line           nil :background "slateblue" :box '(:line-width 1 :color "slateblue" ))
    (set-face-attribute 'mode-line-inactive  nil :background "gray60"   :box '(:line-width 1 :color "gray60" ))))
#+END_SRC
*** grey mode-line
#+BEGIN_SRC emacs-lisp
(setq mode-line-format
      (
       quote(
             " "
             (:eval
              (when (eql buffer-read-only t)
                (propertize " READ ONLY " 'face
                            '(; :background "color-88"
                              :foreground "gray60" :weight bold))))

             (:eval
              (propertize "  %b " 'face
                          (if (buffer-modified-p)
                              '(
                                        ;:background "light slate blue"
                                :background "gray90"
                                :foreground "indian red"
                                :weight bold :height 100 )
                            '(
                              :background "gray90"
                              :foreground "gray20"
                              :weight bold :underline nil :height 100 ))))
             "        "
             mode-line-misc-info)))

(set-face-attribute 'mode-line           nil :background "gray90" :box '(:line-width 1 :color "gray80" ))
(set-face-attribute 'mode-line-inactive  nil :background "gray90"   :box '(:line-width 1 :color "gray90" ))))

#+END_SRC
** Case Study - mood-line : minimilistic + UTF-8 icons

** Mode-line
https://occasionallycogent.com/custom_emacs_modeline/index.html

https://dev.to/gonsie/beautifying-the-mode-line-3k10

Colors: https://www.colorhexa.com/0000ff

*** size
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil
                    :background "#353644"
                    :foreground "white"
                    :box '(:line-width 8 :color "#353644")
                    :overline nil
                    :underline nil)

(set-face-attribute 'mode-line-inactive nil
                    :background "#565063"
                    :foreground "white"
                    :box '(:line-width 8 :color "#565063")
                    :overline nil
                    :underline nil)
#+END_SRC

*** vc background
#+BEGIN_SRC emacs-lisp
(defun vc-branch ()
  (let ((backend (vc-backend buffer-file-name)))
    (substring vc-mode (+ (if (eq backend 'Hg) 2 3) 2))))
(vc-branch)

develop
#+END_SRC

**** Raw code from .emacs.d
https://github.com/gonsie/dotfiles/blob/master/emacs/theme.el#L75
#+BEGIN_SRC emacs-lisp

(setq-default mode-line-format
              (list
               ;; day and time
               '(:eval (propertize (format-time-string " %b %d %H:%M ")
                                   'face 'font-lock-builtin-face))


               '(:eval (propertize (substring vc-mode 5)
                                   'face 'font-lock-comment-face))

               ;; the buffer name; the file name as a tool tip
               '(:eval (propertize " %b "
                                   'face
                                   (let ((face (buffer-modified-p)))
                                     (if face 'font-lock-warning-face
                                       'font-lock-type-face))
                                   'help-echo (buffer-file-name)))

               ;; line and column
               " (" ;; '%02' to set to 2 chars at least; prevents flickering
               (propertize "%02l" 'face 'font-lock-keyword-face) ","
               (propertize "%02c" 'face 'font-lock-keyword-face)
               ") "

               ;; relative position, size of file
               " ["
               (propertize "%p" 'face 'font-lock-constant-face) ;; % above top
               "/"
               (propertize "%I" 'face 'font-lock-constant-face) ;; size
               "] "

               ;; spaces to align right
               '(:eval (propertize
                " " 'display
                `((space :align-to (- (+ right right-fringe right-margin)
                                      ,(+ 3 (string-width mode-name)))))))

               ;; the current major mode
               (propertize " %m " 'face 'font-lock-string-face)
               ;;minor-mode-alist
               ))

(set-face-attribute 'mode-line nil
                    :background "#353644"
                    :foreground "white"
                    :box '(:line-width 8 :color "#353644")
                    :overline nil
                    :underline nil)

(set-face-attribute 'mode-line-inactive nil
                    :background "#565063"
                    :foreground "white"
                    :box '(:line-width 8 :color "#565063")
                    :overline nil
                    :underline nil)
#+END_SRC
*** Right justifcy
#+BEGIN_SRC emacs-lisp
'(:eval (propertize
         " " 'display
         `((space :align-to (- (+ right right-fringe right-margin)
                               ,(+ 3 (string-width mode-name)))))))
#+END_SRC
