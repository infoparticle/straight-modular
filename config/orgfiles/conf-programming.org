#+TITLE: Conf Programming
#+Last Saved: "January 14 Thursday, 2021"
#+property: header-args :tangle yes

* Enabled Config
 :PROPERTIES:
 :header-args: :tangle yes
 :END:

** General
*** highlight-symbol

#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :defer 10
  :bind (("M-n" . highlight-symbol-next)
         ("M-p" . highlight-symbol-prev))
  :init
  (setq highlight-symbol-idle-delay 0.3)
  (add-hook 'prog-mode-hook 'highlight-symbol-mode)
  (highlight-symbol-nav-mode))
#+END_SRC

*** Line numbers only for programming mode

They can also toggled later on with =SPC+t+l=
To add linum to your favorite modes:
(add-hook 'org-mode-hook #'display-line-numbers-mode) ;; who needs linum in org mode!

#+BEGIN_SRC emacs-lisp
(when (version<= "26.0.50" emacs-version )
  (custom-set-faces '(line-number ((t (:inherit default :foreground "gray80")))))
  (add-hook 'prog-mode-hook #'display-line-numbers-mode))
#+END_SRC

*** expand region

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :defer t
  )
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit :defer t)
#+END_SRC
*** origami

#+BEGIN_SRC emacs-lisp
(use-package origami
  :defer t
  :config
  (add-hook 'prog-mode-hook #'origami-mode))
#+END_SRC
** Python

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :defer t
  :init
  (elpy-enable))
#+END_SRC

more ideas:
https://github.com/reconmaster/ki_repo/blob/master/docs/org.org#asynchronously-running-python-blocks-in-org-mode

** Lisp
*** lisp - parken-face for elisp

#+BEGIN_SRC emacs-lisp
(use-package paren-face
  :defer t
  :ensure t
  :hook ((common-lisp-mode . paren-face-mode)
         (emacs-lisp-mode . paren-face-mode)
         (scheme-mode . paren-face-mode)
         (racket-mode . paren-face-mode)
         (hy-mode . paren-face-mode)
         (lfe-mode . paren-face-mode)
         (clojure-mode . paren-face-mode)))
#+END_SRC

*** lisp - aggressive indent

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :diminish aggressive-indent-mode
  :config
  (add-hook 'prog-mode-hook #'aggressive-indent-global-mode)
  (defvar aggressive-indent/excluded '())
  (setq aggressive-indent/excluded '(php-mode rst-mode html-mode ruby-mode python-mode yaml-mode haskell-mode))
  (dolist (i aggressive-indent/excluded)
    (add-to-list 'aggressive-indent-excluded-modes i)))
#+END_SRC

*** lisp - lispy/lispyvillie

  ;;lispy config
  :config
  (lispy-set-key-theme '(lispy))

#+BEGIN_SRC emacs-lisp
(use-package lispy
  :hook ((common-lisp-mode . lispy-mode)
         (emacs-lisp-mode . lispy-mode)
         (scheme-mode . lispy-mode)
         (racket-mode . lispy-mode)
         (hy-mode . lispy-mode)
         (lfe-mode . lispy-mode)
         (clojure-mode . lispy-mode))
)

(use-package lispyville
  :hook (lispy-mode . lispyville-mode)
  :config
  (lispyville-set-key-theme
   '((operators normal)
     c-w
     commentary
     additional-wrap
     slurp/barf-cp))
  (evil-define-key 'normal lispyville-mode-map "#" #'lispyville-comment-or-uncomment-line)
  (evil-define-key 'normal lispyville-mode-map "\\" #'lispyville-comment-or-uncomment-line)
  (evil-define-key 'visual lispyville-mode-map "#" #'lispyville-comment-or-uncomment)
  (evil-define-key 'visual lispyville-mode-map "\\" #'lispyville-comment-or-uncomment))
#+END_SRC

** haskell

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode :defer t)
#+END_SRC

** Web Dev
*** web-dev

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode ("\\.html$" . web-mode)
  :init
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq js-indent-level 2)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-expanding t)
  (setq web-mode-enable-css-colorization t)
  (add-hook 'web-mode-hook 'electric-pair-mode))

(use-package emmet-mode
  :diminish (emmet-mode . "ε")
  :bind* (("C-)" . emmet-next-edit-point)
          ("C-(" . emmet-prev-edit-point))
  :commands (emmet-mode
             emmet-next-edit-point
             emmet-prev-edit-point)
  :init
  (setq emmet-indentation 2)
  (setq emmet-move-cursor-between-quotes t)
  :config
  ;; Auto-start on any markup modes
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode))

(use-package json-mode
  :mode "\\.json\\'"
  :config
  (bind-key "{" #'paredit-open-curly json-mode-map)
  (bind-key "}" #'paredit-close-curly json-mode-map))

(use-package impatient-mode
  :mode ("\\.html$" . impatient-mode)
)
#+END_SRC

*** web mode
http://web-mode.org/assets/theme.el

(set-face-attribute 'default            nil :background "grey14" :foreground "ivory1")
(set-face-attribute 'fringe             nil :background "grey20")
(set-face-attribute 'highlight          nil :background "grey16")
(set-face-attribute 'mode-line          nil :box nil :background "grey26" :foreground "grey50")
(set-face-attribute 'mode-line-inactive nil :background "grey40")

(set-face-attribute 'web-mode-html-tag-face          nil :foreground "#777777")
(set-face-attribute 'web-mode-html-tag-custom-face   nil :foreground "#8a9db4")

(set-face-attribute 'web-mode-html-tag-bracket-face  nil :foreground "#aaaaaa")

(set-face-attribute 'web-mode-html-attr-name-face    nil :foreground "#aaaaaa")
(set-face-attribute 'web-mode-html-attr-equal-face   nil :foreground "#eeeeee")
(set-face-attribute 'web-mode-html-attr-value-face   nil :foreground "RosyBrown")
(set-face-attribute 'web-mode-html-attr-custom-face  nil :foreground "#8a9db4")
(set-face-attribute 'web-mode-html-attr-engine-face  nil :foreground "#00f5ff")
(set-face-attribute 'web-mode-comment-face           nil :foreground "Firebrick")
(set-face-attribute 'web-mode-constant-face          nil :foreground "aquamarine")
(set-face-attribute 'web-mode-css-at-rule-face       nil :foreground "plum4")
(set-face-attribute 'web-mode-css-selector-face      nil :foreground "orchid3")
(set-face-attribute 'web-mode-css-pseudo-class-face  nil :foreground "plum2")
(set-face-attribute 'web-mode-css-property-name-face nil :foreground "Pink3")
(set-face-attribute 'web-mode-preprocessor-face      nil :foreground "DarkSeaGreen")
(set-face-attribute 'web-mode-block-delimiter-face   nil :foreground "DarkSeaGreen")
(set-face-attribute 'web-mode-block-control-face     nil :foreground "SeaGreen")
(set-face-attribute 'web-mode-variable-name-face     nil :foreground "Burlywood")
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :diminish (emmet-mode . "ε")
  :bind* (("C-)" . emmet-next-edit-point)
          ("C-(" . emmet-prev-edit-point))
  :commands (emmet-mode
             emmet-next-edit-point
             emmet-prev-edit-point)
  :init
  (setq emmet-indentation 2)
  (setq emmet-move-cursor-between-quotes t)
  :config
  ;; Auto-start on any markup modes
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode))

(use-package web-mode
  :mode ("\\.html$" . web-mode)
  :init
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq js-indent-level 2)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-auto-expanding t)
  (setq web-mode-enable-css-colorization t)
  ;(set-face-attribute 'web-mode-html-tag-bracket-face  nil :foreground "#aaaaaa")
  (add-hook 'web-mode-hook 'electric-pair-mode))
#+END_SRC
* Disabled Config
 :PROPERTIES:
 :header-args: :tangle no
 :END:

** highlight-inentation

#+BEGIN_SRC emacs-lisp
(use-package highlight-indentation
  :defer t
  :config
  (set-face-background 'highlight-indentation-face "#e3e3d3")
  (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")
  (add-hook 'prog-mode-hook #'highlight-indentation-mode))

#+END_SRC
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :defer t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
